/**
 * work 2 Exercise: Basic CRUD Operations
 * 
 * „Åì„ÅÆ„Éï„Ç°„Ç§„É´„Åß„ÅØ„ÄÅDrizzle ORM„Çí‰Ωø„Å£„ÅüÂü∫Êú¨ÁöÑ„Å™
 * CRUDÊìç‰Ωú„Å´„Å§„ÅÑ„Å¶Â≠¶Áøí„Åó„Åæ„Åô„ÄÇ
 */

import { db } from '../db/connection';
import { users, posts, categories } from '../db/schema';
import { eq, and, or, desc, asc, ne } from 'drizzle-orm';

export async function work2Exercise() {
  console.log('=== work 2: CRUD Operations ===\n');

  try {
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Çí„ÇØ„É™„Ç¢Ôºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    await db.delete(posts);
    await db.delete(users);
    console.log('üßπ Cleared existing data\n');
    // Exercise 1: Create („Éá„Éº„Çø„ÅÆÊåøÂÖ•)
    console.log('1. Creating users...');
    const newUsers = await db.insert(users).values([
      { name: 'Áî∞‰∏≠Â§™ÈÉé', email: 'tanaka@example.com' },
      { name: '‰ΩêËó§Ëä±Â≠ê', email: 'sato@example.com' },
      { name: 'Èà¥Êú®‰∏ÄÈÉé', email: 'suzuki@example.com' }
    ]).returning();

    console.log('‚úÖ Users created:', newUsers.length);

    // Exercise 2: Read („Éá„Éº„Çø„ÅÆË™≠„ÅøÂèñ„Çä)
    console.log('\n2. Reading all users...');
    const allUsers = await db.select().from(users);
    console.log('üìñ Total users:', allUsers.length);
    allUsers.forEach(user => {
      console.log(`  - ${user.name} (${user.email})`);
    });

    // Exercise 3: Conditional queries (Êù°‰ª∂‰ªò„Åç„ÇØ„Ç®„É™)
    console.log('\n3. Finding specific user...');
    const specificUser = await db.select()
      .from(users)
      .where(eq(users.email, 'tanaka@example.com'));

    if (specificUser.length > 0) {
      console.log('üîç Found user:', specificUser[0].name);
    }

    // Exercise 4: Insert posts (ÊäïÁ®ø„ÅÆ‰ΩúÊàê)
    console.log('\n4. Creating posts...');
    if (allUsers.length > 0) {
      const newPosts = await db.insert(posts).values([
        {
          title: 'Drizzle ORM„ÅÆÂü∫Êú¨',
          content: 'Drizzle ORM„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÑ„Éº„É´„Åß„Åô...',
          authorId: allUsers[0].id,
          published: true
        },
        {
          title: 'TypeScript„Å®„Éá„Éº„Çø„Éô„Éº„Çπ',
          content: 'TypeScript„Åß„Çø„Ç§„Éó„Çª„Éº„Éï„Å™DB„Ç¢„ÇØ„Çª„Çπ„Çí...',
          authorId: allUsers[1].id,
          published: false
        }
      ]).returning();

      console.log('‚úÖ Posts created:', newPosts.length);
    }

    // Exercise 5: Update operations (Êõ¥Êñ∞Êìç‰Ωú)
    console.log('\n5. Updating a post...');
    const updatedPosts = await db.update(posts)
      .set({ published: true })
      .where(eq(posts.published, false))
      .returning();

    console.log('üìù Posts updated:', updatedPosts.length);

    // Exercise 6: Complex queries (Ë§áÈõë„Å™„ÇØ„Ç®„É™)
    console.log('\n6. Complex query - published posts ordered by date...');
    const publishedPosts = await db.select()
      .from(posts)
      .where(eq(posts.published, true))
      .orderBy(desc(posts.createdAt));

    publishedPosts.forEach(post => {
      console.log(`  - "${post.title}" by author ID: ${post.authorId}`);
    });

    // Exercise 7: Delete operations (ÂâäÈô§Êìç‰Ωú)
    console.log('\n7. Delete operation (commented out to preserve data)');
    console.log('// const deleted = await db.delete(posts).where(eq(posts.published, false));');

    console.log('\nüéØ Á∑¥ÁøíË™≤È°å:');
    console.log('1. Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„Çí2‰∫∫ËøΩÂä†„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ');
    await db.insert(users).values([
      { name: '„Çµ„É†', email: 'sum@example.com' },
      { name: '„Éú„Éñ', email: 'bob@example.com' }
    ])

    console.log('2. ÂêÑ„É¶„Éº„Ç∂„Éº„Å´ÊäïÁ®ø„Çí‰ΩúÊàê„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ');
    const allUsers2 = await db.select().from(users)
    await db.insert(posts).values([
      {
        title: 'Drizzle ORM„ÅÆÂü∫Êú¨',
        content: 'Drizzle ORM„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„ÉÑ„Éº„É´„Åß„Åô...',
        authorId: allUsers2[0].id,
        published: true
      },
      {
        title: 'TypeScript„Å®„Éá„Éº„Çø„Éô„Éº„Çπ',
        content: 'TypeScript„Åß„Çø„Ç§„Éó„Çª„Éº„Éï„Å™DB„Ç¢„ÇØ„Çª„Çπ„Çí...',
        authorId: allUsers2[1].id,
        published: false
      }
    ]).returning();

    console.log('3. ÁâπÂÆö„ÅÆÊù°‰ª∂„ÅßÊäïÁ®ø„ÇíÊ§úÁ¥¢„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ');
    const nonPublishedPosts = await db.select()
      .from(posts)
      .where(ne(posts.published, true)) // ÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÇÇ„ÅÆ(ne)
      .orderBy(desc(posts.createdAt));

    nonPublishedPosts.forEach(post => [
      console.log(`  - "${post.title}" by author ID: ${post.authorId}`)
    ])

    console.log('4. ÊäïÁ®ø„ÅÆ„Çø„Ç§„Éà„É´„ÇíÊõ¥Êñ∞„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ');
    // ÁâπÂÆö„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆÊäïÁ®ø„ÇíÊõ¥Êñ∞„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åæ„Åö„É¶„Éº„Ç∂„ÉºID„ÇíÂèñÂæó
    const targetUser = await db.select().from(users).where(eq(users.email, 'sum@example.com'));
    if (targetUser.length > 0) {
      await db.update(posts)
        .set({ title: "updated title!" })
        .where(eq(posts.authorId, targetUser[0].id));
    }


  } catch (error) {
    console.error('‚ùå Error during CRUD operations:', error);
  }
}